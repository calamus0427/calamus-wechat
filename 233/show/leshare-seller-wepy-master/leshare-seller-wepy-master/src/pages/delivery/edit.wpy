<template>
    <Tips/>
    <view class="container" wx:if="{{init}}">
        <map id="map" longitude="{{longitude}}" latitude="{{latitude}}"
             markers="{{markers}}" wx:if="{{input.name=='同城配送'}}"
             scale="13" circles="{{circles}}" style="width: 100%; height: 500rpx;"></map>

        <!--表单-->
        <view class="weui-cells-form">
            <Picker :range="type" title="配送方式" fieldName="type" :input.sync="input" @input.user="seletedType"/>
            <InputText_name title="模板名称" :input.sync="input"/>
            <InputText_limitPrice title="起送价格" :input.sync="input" type="digit"/>
            <InputText_fee title="运费" :input.sync="input" type="digit"/>

            <block wx:if="{{input.name=='同城配送'}}">
              <InputText_lv_one_to title="起始距离" placeholder="配送的开始范围(米)" :input.sync="input" type="number" fieldName="toLimit1" @input.user="radius"/>
              <InputText_lv_two_to title="结束距离" placeholder="配送的结束范围(米)" :input.sync="input" type="number" fieldName="toLimit2" @input.user="radius"/>
            </block>
            <block wx:else>
                <InputText_location title="配送范围" :input.sync="input"/>
            </block>
        </view>

        <!--操作栏-->
        <ActionBar @tap.user="submit"/>
    </view>
</template>

<script>
  import wepy from 'wepy';
  import base from '../../mixins/base';
  import input from '../../mixins/input';
  import delivery from '../../api/delivery';
  import shop from '../../api/shop';
  import Tips from '../../utils/Tips';
  import Event from '../../utils/Event';
  import FormTips from '../../components/weui/tips';
  import Picker from '../../components/weui/picker';
  import InputText from '../../components/weui/input';
  import ActionBar from '../../components/common/action_bar';

  export default class DeliveryEdit extends wepy.page {
    def = {
      init: false,
      mode: 'create',
      type: [
        {value: 'SELF', key: '到店自提'},
        {value: 'CITY', key: '同城配送'},
        {value: 'EXPRESS', key: '快递配送'}
      ],
      latitude: '',
      longitude: '',
      markers: [],
      circles: []
    };
    data = {...this.def};

    async onLoad({mode, deliveryId}, {preload}) {
      this.mode = mode;

      let shopInfo = await shop.info();

      let markers = [{
        iconPath: '../../images/icons/address_red.png',
        id: 0,
        latitude: shopInfo.latitude,
        longitude: shopInfo.longitude,
        width: 30,
        height: 30
      }];

      this.latitude = shopInfo.latitude;
      this.longitude = shopInfo.longitude;

      this.markers = markers;
      if (mode == 'edit') {
        this.input = preload.delivery;
        this.input.toLimit1 = this.input.fromLimit;
        if (this.input.toLimit == '' || this.input.toLimit == 0) {
          this.input.toLimit = '';
          this.input.fromLimit2 = '';
        } else {
          this.input.fromLimit2 = this.input.fromLimit;
        }
        this.input.toLimit2 = this.input.toLimit;

        for (let i = 0; i < 2; i++) {
          const colors = ['#000000510', '#3399FF99'];
          let circle = {
            latitude: shopInfo.latitude,
            longitude: shopInfo.longitude,
            radius: this.getValue('toLimit' + (i + 1)),
            color: '#ddd',
            fillColor: colors[i]
          };

          this.circles[i] = circle;
        }
      }

      this.loaded();
    };

    getValue(id) {
      if (this.input[id] > 0) {
        return Number.parseInt(this.input[id]);
      } else {
        return 0;
      }
    }

    limitRadius(id) {
      let toLimit1 = this.getValue('toLimit1');
      let toLimit2 = this.getValue('toLimit2');
      if (id == 'toLimit1') {
        if (toLimit2 > 0) {
          this.input['fromLimit2'] = toLimit1;
        }
      }
      if (id == 'toLimit2') {
        this.input['fromLimit2'] = toLimit1;
      }
    }

    methods = {
      radius(value, id, level) {
        const colors = ['#000000510', '#3399FF99'];

        let circle = {
          latitude: this.latitude,
          longitude: this.longitude,
          radius: this.getValue('toLimit' + level),
          color: '#ddd',
          fillColor: colors[level - 1]
        };

        this.circles[level - 1] = circle;

        if (!this.circles[0]) {
          this.input.toLimit1 = 0;
          circle.radius = 0;
          circle.fillColor = colors[0];
          this.circles[0] = circle;
        }

        this.input[id] = Number.parseInt(value);
        this.limitRadius(id);

        this.$apply();
      },
      seletedType(data) {
        this.input.name = data.key;
      },
      async submit() {
        if (this.getValue('toLimit2') == 0) {
          this.input['fromLimit2'] = 0;
          this.input['toLimit2'] = 0;
        }
        if (this.getValue('toLimit2') < this.getValue('fromLimit2')) {
          this.tips('结束距离不能小于开始距离');

          return;
        }
        if (this.getValue('toLimit2') == 0) {
          this.input['fromLimit2'] = '';
          this.input['toLimit2'] = '';
        }
        if (!this.validate()) {
          return;
        }

        this.input.fromLimit = this.input.toLimit1;
        this.input.toLimit = this.input.toLimit2;
        if (this.mode == 'edit') {
          await delivery.update(this.input.id, this.input);
          await Tips.success('更新成功！');
        } else {
          this.input.location = '县城';
          await delivery.create(this.input);
          await Tips.success('创建成功！');
        }
        Event.emit(Event.DELIVERY_LIST_UPDATE);
        wepy.navigateBack();
      }
    };

    validate() {
      const rules = [
        {
          value: this.input.type,
          method: 'required',
          message: '请选择配送方式'
        },
        {
          value: this.input.name,
          method: 'required',
          message: '请输入模板名称'
        },
        {
          value: this.input.name,
          method: 'maxlength',
          param: '15',
          message: '模板名称太长'
        },
        {
          value: this.input.limitPrice,
          method: 'required',
          message: '起送价格必填'
        },
        {
          value: this.input.limitPrice,
          method: 'number',
          message: '起送价格必须为数字'
        },
        {
          value: this.input.limitPrice,
          method: 'min',
          param: '0',
          message: '起送价格不能为负数'
        },
        {
          value: this.input.limitPrice,
          method: 'max',
          param: '10000',
          message: '起送价格太高'
        },
        {
          value: this.input.fee,
          method: 'required',
          message: '运费必填'
        },
        {
          value: this.input.fee,
          method: 'number',
          message: '运费必须为数字'
        },
        {
          value: this.input.fee,
          method: 'min',
          param: '0',
          message: '运费不能为负数'
        },
        {
          value: this.input.fee,
          method: 'max',
          param: '10000',
          message: '运费价格太高'
        },
        {
          value: this.input.toLimit1,
          method: 'number',
          message: '结束距离只能为数字'
        },
        {
          value: this.input.toLimit2,
          method: 'number',
          message: '结束距离只能为数字'
        }
      ];
      return this.check(rules);
    }

    events = {};
    components = {
      Tips: FormTips,
      ActionBar: ActionBar,
      Picker: Picker,
      InputText_name: InputText,
      InputText_limitPrice: InputText,
      InputText_fee: InputText,
      InputText_location: InputText,
      InputText_lv_one_from: InputText,
      InputText_lv_one_to: InputText,
      InputText_lv_two_from: InputText,
      InputText_lv_two_to: InputText
    };
    mixins = [base, input];
    config = {
      navigationBarTitleText: '编辑模板'
    };
  }
</script>

<style lang="scss">
    @import "../../styles/variable";
</style>
