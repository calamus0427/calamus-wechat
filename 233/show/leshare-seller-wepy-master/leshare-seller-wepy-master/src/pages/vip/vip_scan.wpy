<template>
  <Tips/>
  <view class="container box-bg" wx:if="{{init}}">
    <VipCard :member.sync="member" :vipCard.sync="card" :userInfo.sync="customer"
             @detail.user="detail"/>

    <view wx:if="{{result == null}}">
      <ZanTab :tab.sync="tab" fixed="0"/>
    </view>


    <!--累计消费-->
    <view  wx:if="{{tab.selectedId == 'COST'}}">
      <!--消费前-->
      <view class="weui-cells weui-cells-form" wx:if="{{result == null}}">
        <view class="weui-cell weui-cell_input">
          <view class="weui-cell__hd">
            <view class="weui-label">消费金额</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" id="price" @input="input" value="{{input.price}}"
                   type="number" maxlength="6" placeholder="请输入消费金额"/>
          </view>
        </view>
        <view class="weui-cell" wx:if="{{card.supplyBonus == 1}}">
          <view class="weui-cell__hd">
            <view class="weui-label">累计积分</view>
          </view>
          <text>{{bonus ? bonus : 0}}</text>
        </view>
        <repeat for="{{presentRules}}" key="index" index="index" item="item">
          <view class="weui-cell">
            <view class="weui-cell__hd">
              <view class="weui-label">{{item.ruleName}}</view>
            </view>
            <Stepper :item.sync="item" :index.sync="index" @minus.user="minus" @plus.user="plus"/>
            <view class="weui-cell__ft">
              <view class="ml20">{{item.unit}}</view>
            </view>
          </view>
        </repeat>
      </view>

      <!--消费后-->
      <view class="weui-cells weui-cells-form"  wx:else>
        <view class="weui-cell weui-cell_input" wx:if="{{input.price > 0}}">
          <view class="weui-cell__hd">
            <view class="weui-label">消费完成</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input"  value="{{result}}" disabled/>
          </view>
        </view>

        <repeat for="{{presentRules}}" key="index" index="index" item="item">
          <view class="weui-cell" wx:if="{{item.stepper > 0}}">
            <view class="weui-cell__hd">
              <view class="weui-label">{{item.ruleName}}</view>
            </view>
            <view class="weui-cell__bd">
              <input class="weui-input"  value="累计{{item.stepper}} {{item.unit}}" disabled/>
            </view>
          </view>
        </repeat>
      </view>

      <!--权益提示-->
      <view class="tips-box column" wx:if="{{discountRuleText.length > 0 || bonusRuleText.length > 0}}">
        <block wx:if="{{discountRuleText.length > 0}}">
          <text>• 会员折扣</text>
          <text wx:for="{{discountRuleText}}" class="ml20">- {{item}}</text>
        </block>
        <block wx:if="{{bonusRuleText.length > 0}}">
          <text>• 会员积分</text>
          <text wx:for="{{bonusRuleText}}" class="ml20">- {{item}}</text>
        </block>
      </view>
    </view>

    <!--修改积分-->
    <view wx:if="{{tab.selectedId == 'BONUS'}}">

      <!--开启积分-->
      <block wx:if="{{card.supplyBonus == 1}}">
        <!--操作前-->
        <view class="weui-cells weui-cells-form"   wx:if="{{result == null}}">
          <view class="weui-cell weui-cell_input">
            <view class="weui-cell__hd">
              <view class="weui-label">积分变动</view>
            </view>
            <view class="weui-cell__bd">
              <input class="weui-input" id="bonus" @input="input" value="{{input.bonus}}"
                     type="number" maxlength="6" placeholder="请输入变动积分"/>
            </view>
          </view>
        </view>
        <!--操作后-->
        <view class="weui-cells weui-cells-form"  wx:else>
          <view class="weui-cell weui-cell_input">
            <view class="weui-cell__hd">
              <view class="weui-label">保存成功</view>
            </view>
            <view class="weui-cell__bd">
              <input class="weui-input"  value="{{result}}" disabled/>
            </view>
          </view>
        </view>
      </block>
      <view class="row-center" style="min-height: 100px" wx:else>
        <text class="ml20 muted" >尚未开启积分功能</text>
      </view>

    </view>

    <!--修改折扣率-->
    <view wx:if="{{tab.selectedId == 'MEMBER'}}">
      <!--操作前-->
      <view class="weui-cells weui-cells-form" >
        <view class="weui-cell weui-cell_input">
          <view class="weui-cell__hd">
            <view class="weui-label">会员折扣</view>
          </view>
          <view class="weui-cell__bd" wx:if="{{result == null}}">
            <input class="weui-input" id="customDiscount" @input="input" value="{{member.customDiscount}}"
                   type="number" maxlength="6" placeholder="输入90表示9折"/>
          </view>
          <view class="weui-cell__bd" wx:else>
            <input class="weui-input"  value="已设置为{{member.customDiscount / 10}}折" disabled/>
          </view>
        </view>
      </view>
      <view class="tips-box">
        <text>提示：输入90表示9则，输入85表示8.5折</text>
      </view>
    </view>

    <view class="message-box row-center" wx:if="{{message}}">
      {{message}}
    </view>

    <!--操作栏-->
    <ActionBar @tap.user="add" :okText.sync="okText" cancelText="返回"/>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import auth from '../../api/auth';
  import input from '../../mixins/input';
  import base from '../../mixins/base';
  import VipCard from '../../components/vip/vip_card';
  import ActionBar from '../../components/common/action_bar';
  import FormTips from '../../components/weui/tips';
  import member from '../../api/member';
  import userInfo from '../../api/customer_info';
  import Event from '../../utils/Event';
  import Tips from '../../utils/Tips';
  import ZanTab from '../../components/zanui/tab';
  import Stepper from '../../components/zanui/stepper';
  export default class VipScan extends wepy.page {
    def = {
      init: false,
      customer: {},
      member: {},
      card: {},
      scene: null,
      message: null,
      result: null,
      tab: {
        list: [
          {id: 'COST', title: '消费'},
          {id: 'BONUS', title: '积分'},
          {id: 'MEMBER', title: '会员'}
        ],
        selectedId: 'COST'
      },
      presentRules: [],
      details: []
    };
    data = {...this.def};

    async onLoad (options, {preload}) {
      if (!auth.isLogin()) {
        this.$redirect('/pages/home/index');
        return;
      }
      try {
        this.card = await member.cardInfo();
        this.presentRules = this.card.memberPresentRules;
        this.presentRules.forEach((item, index) => {
          this.details.push({
            ruleId: item.id,
            currentCount: 0
          });
          this.presentRules[index].stepper = 0;
        });
        // 扫描二维码进入
        if (options.scene) {
          this.scene = decodeURIComponent(options.scene);
          this.member = await member.Info(options.scene);
          const {customer} = await userInfo.detailInfo(this.member.customerId);
          this.customer = customer;
        }
        // 用户信息进入
        if (preload) {
          const {customer} = preload.data.customer;
          this.customer = customer;
          this.member = preload.data.member;
          this.scene = this.member.memberNumber;
        }
        this.loaded();
      } catch (e) {
        this.message = e.message;
        this.$apply();
        console.error(e);
        Tips.error(e.message);
      }
    };
    methods = {
      async add () {
        if (this.result) {
          await this.scan();
          return;
        }
        if (this.tab.selectedId == 'COST') {
          if (!this.costValidate()) {
            return;
          }
          const costParam = {
            addBonus: this.bonus,
            cardNumber: this.scene,
            costMoney: this.input.price,
            type: 'OFFLINE_ORDER_ADD',
            memberPresentDetails: this.details
          };
          await member.memberAdd(costParam);
          await Tips.success('消费已完成');
          this.result = `消费${this.input.price}元` + (this.bonus > 0 ? `，累计积分${this.bonus}` : '');
        } else if (this.tab.selectedId == 'BONUS') {
          if (this.card.supplyBonus != 1) {
            await Tips.alert('尚未开启积分');
            return;
          }
          if (!this.bonusValidate()) {
            return;
          }
          const bouns = this.input.bonus;
          const bounsParam = {
            addBonus: bouns,
            cardNumber: this.member.memberNumber,
            costMoney: 0,
            type: 'OFFLINE_ORDER_ADD'
          };
          await member.memberAdd(bounsParam);
          await Tips.success('积分已保存');
          this.result = `已${bouns > 0 ? '增加' : '扣除'}${bouns > 0 ? bouns : -bouns}积分`;
          this.input.bonus = null;
        } else if (this.tab.selectedId == 'MEMBER') {
          const memberParam = {
            memberId: this.member.memberId,
            customDiscount: this.input.customDiscount
          };
          this.result = true;
          member.customDiscount(memberParam);
          await Tips.success('已保存');
        }
        this.member = await member.Info(this.scene);
        Event.emit(Event.SHOP_CUSTOMER_UPDATE);
        this.loaded();
      },
      detail () {
        this.$navigate(`/pages/customer/info?customerId=${this.customer.id}`);
      },
      minus (info) {
        this.details[info.index].ruleId = info.id;
        this.details[info.index].currentCount = info.stepper;
      },
      plus (info) {
        this.details[info.index].ruleId = info.id;
        this.details[info.index].currentCount = info.stepper;
      }
    };
    async scan() {
      try {
        const data = await wepy.scanCode();
        Tips.loading('扫描中');
        console.info(data);
        const {errMsg, path} = data;
        if (errMsg != 'scanCode:ok') {
          Tips.alert('扫描失败请重试');
          return;
        }
        // 会员卡的情况
        const memberUrlPrefix = 'pages/vip/vip_scan';
        const isMember = path && path.indexOf(memberUrlPrefix) >= 0;
        if (isMember) {
          this.$redirect('/' + path);
          return;
        }
        Tips.alert('未知二维码');
      } finally {
        Tips.loaded();
      }
    }
    components = {
      Tips: FormTips,
      VipCard: VipCard,
      ActionBar: ActionBar,
      ZanTab: ZanTab,
      Stepper: Stepper
    };
    config = {
      navigationBarTitleText: '会员卡核销'
    };
    costValidate () {
      const isPrice = this.input.price != 0 && this.input.price != null;
      const isPresent = this.details.some(detail => detail && detail.currentCount > 0);
      if (!isPresent && !isPrice) {
        this.tips('请输入消费信息');
        return false;
      }
      const rules = [
        {
          value: this.input.price,
          method: 'number',
          param: 0.01,
          message: '消费金额必须为数字'
        },
        {
          value: this.input.price,
          method: 'min',
          param: 0.01,
          message: '消费金额不能为0或负数'
        }
      ];
      return this.check(rules);
    }
    bonusValidate () {
      const rules = [
        {
          value: this.input.bonus,
          method: 'required',
          param: 0,
          message: '变动积分不能为空'
        }
      ];
      return this.check(rules);
    }
    computed = {
      bonus () {
        if (this.card == null) return;
        const {bonusRule, supplyBonus} = this.card;
        if (bonusRule == null || supplyBonus == 0) {
          return 0;
        }
        return Math.floor(this.input.price / bonusRule.costMoneyUnit) * bonusRule.increaseBonus;
      },
      okText () {
        return this.result ? '继续扫描' : '确定';
      },
      bonusRuleText() {
        if (this.card == null) return;
        const rule = this.card.bonusRule;
        let describes = [];
        // 开启积分规则
        if (this.card.supplyBonus == 1 && this.card.bonusRule != null) {
          // 有初始积分的情况
          if (rule.initIncreaseBonus > 0) {
            describes.push(`注册绑定手机开卡即送 ${rule.initIncreaseBonus} 积分`);
          }
          describes.push(`每消费 ${rule.costMoneyUnit} 元可获得 ${rule.increaseBonus} 积分`);
          if (rule.isCost == 1) {
            describes.push(`每使用 ${rule.costBonusUnit} 积分，抵扣 ${rule.reduceMoney} 元现金，每笔订单最多使用 ${rule.maxReduceBonus} 积分，订单需满 ${rule.limitMoney} 元`);
          }
        }
        return describes;
      },
      discountRuleText() {
        if (this.card == null) return;
        const rules = this.card.discountRules;
        if (this.card.supplyDiscount == 0 || rules == null) return;
        const describes = [];
        // 有折扣的情况
        for (let rule of rules) {
          const {upgradeFee, discount, levelName} = rule;
          if (discount == 100) continue;
          const upgradeText = upgradeFee == 0 ? '完成注册' : `消费满${upgradeFee}元`;
          const discountText = (discount / 10).toFixed(1);
          const describe = `${levelName}：${upgradeText}，部分商品${discountText}折优惠`;
          describes.push(describe);
        }
        return describes;
      }
    };
    mixins = [base, input];
  }
</script>

<style lang="scss">
    @import "../../styles/variable";
  .box-bg{
    background-color: #FFF;
  }
  .message-box{
    font-size: $text-xxl;
    color: $color-muted;
    height: 300px;
  }
  .tips-box, .result-box{
    margin-top: 20rpx;
    padding: 20rpx;
    text{
      color: $color-muted;
    }
  }
  .result-box{
    border-top: $border;
  }
</style>
