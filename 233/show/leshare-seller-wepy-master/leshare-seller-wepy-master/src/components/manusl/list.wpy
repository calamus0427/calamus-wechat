<template>
  <scroll-view scroll-y class="address-panel" wx:if="{{display && init}}" >

    <!--列表展现-->
    <repeat for="{{available}}" key="index" index="index" item="item">
      <Address :address.sync="item" @select.user="select"/>
    </repeat>

    <view class="disable-title-box" wx:if="{{disable.length > 0}}">
      <text class="muted">以下地址不满足配送条件：</text>
    </view>
    <repeat for="{{disable}}" key="index" index="index" item="item">
      <DisableAddress :address.sync="item" @select.user="select" :disabled.sync="disableValue"/>
    </repeat>

    <view class="zan-panel {{isPageEmpty ? 'zan-panel-bottom' : '' }}">
      <view class="zan-btns">
        <button class="zan-btn zan-btn--fill" @tap="add">新增地址</button>
        <button class="zan-btn" @tap="back">返回</button>
      </view>
    </view>

    <!-- 加载提示 -->
    <Loadmore :page.sync="page"/>

    <!--占位符-->
    <Placeholder :show.sync="isPageEmpty" message="您还没有收货地址"  @tap.user="add"/>
  </scroll-view>
</template>

<script>
  import wepy from 'wepy';
  import base from '../../mixins/base';
  import mausl from '../../api/mausl';
  import Placeholder from '../../components/common/placeholder';
  import Event from '../../utils/Event';
  import Loadmore from '../../components/weui/loadmore';
  import Address from './address_item';

  export default class AddressList extends wepy.component {
    props = {
      goodsList: {},
      display: {
        default: false,
        twoWay: true
      }
    };
    data = {
      disableValue: 1,
      init: false,
      available: [],
      disable: [],
      isPageEmpty: false
    };
    async onLoad () {
      Event.listen(Event.ADDRESS_LIST_UPDATE, this.update.bind(this), this);
    };
    async update (isCreate) {
      await this.load();
      const size = this.available.length;
      if (size == 1 && isCreate) {
        // 如果只有一个可用地址，则直接选定并返回
        Event.emit(Event.TRADE_ADDRESS_UPDATE, this.available[0]);
        this.display = false;
        this.$apply();
      } else {
        // 如果列表变更了，需要清空订单中的
        Event.emit(Event.TRADE_ADDRESS_UPDATE, null);
      }
    }
    async load() {
      const {available, disable} = await mausl.addresses(this.goodsList);
      this.available = available;
      this.disable = disable;
      this.isPageEmpty = available.length == 0 && disable.length == 0;
      this.loaded();
    }
    async onPullDownRefresh () {
      await this.load();
      wepy.stopPullDownRefresh();
    }
    watch = {
      async display(value) {
        // 首次加载（商品列表加载完毕/页面为初始化/页面已展现）
        if (this.init == false && value == true) {
          await this.load();
          this.init = true;
          // 一个地址也没有
          if (this.isPageEmpty) {
            this.$root.$navigate('/pages/address/edit?mode=create');
          }
          this.$apply();
        }
      }
    };
    methods = {
      add() {
        this.$root.$navigate('/pages/address/edit?mode=create');
      },
      back() {
        this.display = false;
      },
      select(address) {
        Event.emit(Event.TRADE_ADDRESS_UPDATE, address);
        this.display = false;
      }
    };
    events = {};
    components = {
      Placeholder: Placeholder,
      Loadmore: Loadmore,
      Address: Address,
      DisableAddress: Address
    };
    mixins = [base];
    config = {
      navigationBarTitleText: '选择地址',
      enablePullDownRefresh: true
    };
  }
</script>

<style lang="scss">
  @import "../../styles/variable";

  .zan-panel-bottom{
    width: 750rpx;
    position: fixed;
    bottom: 0;
  }

  .address-panel{
    z-index: 100000;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: $color-bg-body;
  }

  .disable-title-box{
    padding-left: 20rpx;
    padding-top: 20rpx;
    padding-bottom: 10rpx;
  }
</style>
