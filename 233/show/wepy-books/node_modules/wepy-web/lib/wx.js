'use strict';

exports.__esModule = true;

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _query = require('./helper/query');

var _device = require('./helper/device');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var callback = function callback(type, o, name, data) {
    if (typeof o[type] === 'function') {
        setTimeout(function () {
            if (name === 'login') {
                o[type].call(wx, { errMsg: name + ':' + (type === 'fail' ? 'fail' : 'ok'), code: data.code, data: data });
            } else if (name === 'getSystemInfo') {
                o[type].call(wx, data);
            } else {
                o[type].call(wx, { errMsg: name + ':' + (type === 'fail' ? 'fail' : 'ok'), data: data });
            }
        }, 0);
    }
};

var wx = window.wx || {};

wx.login = wx.login ? wx.login : function login(o) {
    console.error('wx.login is only implemented in browser');
};

wx.getStorageSync = wx.getStorageSync ? wx.getStorageSync : function getStorageSync(v) {
    var rst = window.localStorage.getItem(v);
    try {
        rst = JSON.parse(rst);
    } catch (e) {}
    return rst;
};
wx.getStorage = wx.getStorage ? wx.getStorage : function getStorage(o) {
    var rst = wx.getStorageSync(o.key);
    callback('success', o, 'getStorage', rst);
    callback('complete', o, 'getStorage', rst);
};
wx.setStorageSync = wx.setStorageSync ? wx.setStorageSync : function setStorageSync(k, d) {
    if (typeof d !== 'string') {
        d = JSON.stringify(d);
    }
    window.localStorage.setItem(k, d);
};
wx.setStorage = wx.setStorage ? wx.setStorage : function setStorage(o) {
    var rst = void 0;
    try {
        rst = this.setStorageSync(o.key, o.data);
        callback('success', o, 'getStorage', rst);
    } catch (e) {
        callback('fail', o, 'getStorage', rst);
    }
    callback('complete', o, 'getStorage', rst);
};
wx.getStorageInfoSync = wx.getStorageInfoSync ? wx.getStorageInfoSync : function getStorageInfoSync() {
    var MAX_SIZE = 5 * 1024;
    var keys = Object.keys(window.localStorage);
    return {
        currentSize: 1,
        keys: keys,
        limitSize: MAX_SIZE
    };
};
wx.getStorageInfo = wx.getStorageInfo ? wx.getStorageInfo : function getStorageInfo(o) {
    var rst = this.getStorageInfoSync();
    callback('success', o, 'getStorageInfo', rst);
    callback('complete', o, 'getStorageInfo', rst);
};
wx.removeStorageSync = wx.removeStorageSync ? wx.removeStorageSync : function removeStorageSync(k) {
    window.localStorage.removeItem(k);
};
wx.removeStorage = wx.removeStorage ? wx.removeStorage : function removeStorage(o) {
    var rst = void 0;
    try {
        rst = this.removeStorage(o.key);
        callback('success', o, 'getStorage', rst);
    } catch (e) {
        callback('fail', o, 'getStorage', rst);
    }
    callback('complete', o, 'getStorage', rst);
};
wx.clearStorageSync = wx.clearStorageSync ? wx.clearStorageSync : function clearStorageSync() {
    window.localStorage.clear();
};
wx.clearStorage = wx.clearStorage ? wx.clearStorage : function clearStorage() {
    var rst = void 0;
    try {
        rst = this.clearStorage();
    } catch (e) {}
};

wx.navigateTo = wx.navigateTo ? wx.navigateTo : function navigateTo(o) {
    window.$router.go(o.url);
};
wx.redirectTo = wx.redirectTo ? wx.redirectTo : function redirectTo(o) {
    window.$router.go(o.url);
};
wx.switchTab = wx.switchTab ? wx.switchTab : function switchTab(o) {
    window.$router.go(o.url);
};
wx.navigateBack = wx.navigateBack ? wx.navigateBack : function navigateBack(o) {
    if (!o) {
        o = {};
    }
    if (o.delta) o.delta = -1;
    window.$router.go(o.delta);
};

wx.getSystemInfoSync = wx.getSystemInfoSync ? wx.getSystemInfoSync : function getSystemInfoSync() {
    return {
        SDKVersion: '0.0.0',
        language: '-',
        model: (0, _device.browser)(),
        pixelRatio: 0,
        platform: (0, _device.system)(),
        screenHeight: window.screen.height,
        screenWidth: window.screen.width,
        system: (0, _device.system)(),
        version: '0.0.0',
        windowHeight: window.innerHeight,
        windowWidth: window.innerWidth
    };
};
wx.getSystemInfo = wx.getSystemInfo ? wx.getSystemInfo : function getSystemInfo(o) {
    var rst = this.getSystemInfoSync();
    callback('success', o, 'getSystemInfo', rst);
    callback('complete', o, 'getSystemInfo', rst);
};
wx.canIUse = wx.canIUse ? wx.canIUse : function canIUse() {
    return true;
};

wx.getNetworkType = wx.getNetworkType ? wx.getNetworkType : function getNetworkType() {
    return 'unkown';
};

wx.setNavigationBarTitle = wx.setNavigationBarTitle ? wx.setNavigationBarTitle : function setNavigationBarTitle(o) {
    document.title = o.title;
    callback('success', o, 'setNavigationBarTitle', null);
    callback('complete', o, 'setNavigationBarTitle', null);
};
wx.hideKeyboard = wx.hideKeyboard ? wx.hideKeyboard : function hideKeyboard() {
    setTimeout(function () {
        var field = document.createElement('input');
        field.setAttribute('type', 'text');
        field.setAttribute('style', 'position:absolute; top: 0px; opacity: 0; -webkit-user-modify: read-write-plaintext-only; left:0px;');
        document.body.appendChild(field);

        field.onfocus = function () {
            setTimeout(function () {
                field.setAttribute('style', 'display:none;');
                setTimeout(function () {
                    document.body.removeChild(field);
                    document.body.focus();
                }, 14);
            }, 200);
        };
        field.focus();
    }, 50);
};

['getUserInfo', 'switchTab', 'showNavigationBarLoading', 'hideNavigationBarLoading', 'createAnimation', 'requestPayment', 'chooseImage', 'showModal', 'showToast', 'showActionSheet'].forEach(function (k) {
    if (!wx[k]) {
        wx[k] = function () {
            var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            console.error('wx.' + k + ' is not supported in browser or you did add it in config.');
            callback('fail', o, k, null);
            callback('complete', o, k, null);
        };
    }
});

wx.request = wx.request ? wx.request : function request(options) {
    var handlers = {};
    ['success', 'fail', 'complete', 'beforeAll', 'beforeSuccess', 'afterSuccess', 'beforeCancel', 'cancel', 'afterCancel', 'beforeFail', 'afterFail', 'afterAll'].forEach(function (k) {
        handlers[k] = options[k];
        delete options[k];
    });
    var rst = { errMsg: 'request', statusCode: 0, data: undefined };
    if (!options.method || options.method.toLowerCase() === 'get') {
        options.params = options.data;
        delete options.data;
    }
    (0, _axios2.default)(options).then(function (res) {
        rst.errMsg = rst.errMsg + ':ok';
        rst.statusCode = res.status;
        rst.data = res.data;

        if (typeof handlers.beforeAll === 'function') {
            handlers.beforeAll(res);
        }
        if (typeof handlers.beforeSuccess === 'function') {
            handlers.beforeSuccess(res);
        }
        if (typeof handlers.success === 'function') {
            handlers.success(res);
        }
        if (typeof handlers.afterSuccess === 'function') {
            handlers.afterSuccess(res);
        }
        if (typeof handlers.complete === 'function') {
            handlers.complete(res);
        }
        if (typeof handlers.afterAll === 'function') {
            handlers.afterAll(res);
        }
    }).catch(function (res) {
        if (typeof handlers.beforeAll === 'function') {
            handlers.beforeAll(res);
        }
        if (_axios2.default.isCancel(res)) {
            rst.errMsg = rst.errMsg + ':cancel';
            if (typeof handlers.fail === 'function') {
                handlers.fail(res);
            }
            if (typeof handlers.beforeCancel === 'function') {
                handlers.beforeCancel(res);
            }
            if (typeof handlers.cancel === 'function') {
                handlers.cancel(res);
            }
            if (typeof handlers.afterCancel === 'function') {
                handlers.afterCancel(res);
            }
        } else {
            rst.errMsg = rst.errMsg + ':fail';
            if (typeof handlers.beforeFail === 'function') {
                handlers.beforeFail(res);
            }
            if (typeof handlers.fail === 'function') {
                handlers.fail(res);
            }
            if (typeof handlers.afterFail === 'function') {
                handlers.afterFail(res);
            }
        }
        rst.data = res;
        if (typeof handlers.complete === 'function') {
            handlers.complete(res);
        }
        if (typeof handlers.afterAll === 'function') {
            handlers.afterAll(res);
        }
    });
};

if (typeof window !== 'undefined') {
    window.getApp = function () {
        return _vue2.default;
    };

    window.getCurrentPages = function () {
        if (wx._currentPage) return [wx._currentPage];else return [wx._currentPages[0]];
    };
}

window.wx = wx;

exports.default = wx;